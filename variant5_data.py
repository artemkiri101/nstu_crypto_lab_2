"""
Модуль с данными для варианта 5 лабораторной работы.

Содержит алфавит и распределения вероятностей P1 и P2.
"""

from typing import Dict, List


# Алфавит источника для варианта 5
VARIANT5_SYMBOLS: List[str] = ['а', 'б', 'в', 'г', 'д', 'е', 'ж', 'з']

# Вероятности P1(A) для варианта 5
VARIANT5_P1: List[float] = [0.5, 0.01, 0.09, 0.02, 0.08, 0.2, 0.07, 0.03]

# Вероятности P2(A) для варианта 5 (точные вычисления)
VARIANT5_P2: List[float] = [
    0.25,       # 2⁻² = 0.25
    0.0078125,  # 2⁻⁷ = 0.0078125
    0.015625,   # 2⁻⁶ = 0.015625
    0.03125,    # 2⁻⁵ = 0.03125
    0.0625,     # 2⁻⁴ = 0.0625
    0.25,       # 2⁻² = 0.25
    0.25,       # 2⁻² = 0.25
    0.1328125   # 17/128 = 0.1328125
]


def validate_variant5_data() -> None:
    """Проверяет корректность данных для варианта 5.

    Проверяет:
    - Количество символов и вероятностей
    - Сумму вероятностей (должна быть равна 1.0)

    Raises:
        AssertionError: Если данные некорректны
    """
    # Проверка количества элементов
    assert len(VARIANT5_SYMBOLS) == 8, "Должно быть 8 символов"
    assert len(VARIANT5_P1) == 8, "P1 должно содержать 8 вероятностей"
    assert len(VARIANT5_P2) == 8, "P2 должно содержать 8 вероятностей"

    # Проверка суммы вероятностей (допускается небольшая погрешность)
    sum_p1: float = sum(VARIANT5_P1)
    sum_p2: float = sum(VARIANT5_P2)

    assert abs(sum_p1 - 1.0) < 1e-6, f"Сумма P1 должна быть 1.0, получилось {sum_p1}"
    assert abs(sum_p2 - 1.0) < 1e-6, f"Сумма P2 должна быть 1.0, получилось {sum_p2}"

    print("✓ Данные варианта 5 корректны!")
    print(f"  Сумма P1: {sum_p1}")
    print(f"  Сумма P2: {sum_p2}")


def generate_test_sequences() -> Dict[str, str]:
    """Генерирует тестовые последовательности для исследований.

    Returns:
        Словарь с тремя типами последовательностей:
        - 'uniform': равномерное распределение
        - 'p1': распределение P1
        - 'p2': распределение P2
    """
    import random

    # Последовательность с равномерным распределением
    uniform_seq: str = ''.join(random.choices(VARIANT5_SYMBOLS, k=1000))

    # Последовательность с распределением P1
    p1_seq: str = ''.join(random.choices(VARIANT5_SYMBOLS, weights=VARIANT5_P1, k=1000))

    # Последовательность с распределением P2
    p2_seq: str = ''.join(random.choices(VARIANT5_SYMBOLS, weights=VARIANT5_P2, k=1000))

    return {
        'uniform': uniform_seq,
        'p1': p1_seq,
        'p2': p2_seq
    }


if __name__ == "__main__":
    """Точка входа для тестирования данных варианта."""
    validate_variant5_data()